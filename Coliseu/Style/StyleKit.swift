//
//  StyleKit.swift
//  Coliseu
//
//  Created by Ricardo Pereira on 16/10/2014.
//  Copyright (c) 2014 (null). All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var darkOrange: UIColor = UIColor(red: 0.671, green: 0.286, blue: 0.165, alpha: 1.000)
        static var hardOrange: UIColor = UIColor(red: 1.000, green: 0.439, blue: 0.133, alpha: 1.000)
        static var mediumOrange: UIColor = UIColor(red: 0.969, green: 0.592, blue: 0.216, alpha: 1.000)
        static var softOrange: UIColor = UIColor(red: 1.000, green: 0.863, blue: 0.353, alpha: 1.000)
        static var orange: UIColor = UIColor(red: 1.000, green: 0.338, blue: 0.000, alpha: 1.000)
        static var pink: UIColor = UIColor(red: 0.675, green: 0.227, blue: 0.361, alpha: 1.000)
        static var softPink: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.689, alpha: 1.000)
        static var darkPurple: UIColor = UIColor(red: 0.431, green: 0.184, blue: 0.533, alpha: 1.000)
        static var hardPurple: UIColor = UIColor(red: 0.310, green: 0.196, blue: 0.690, alpha: 1.000)
        static var softPurple: UIColor = UIColor(red: 0.647, green: 0.341, blue: 0.792, alpha: 1.000)
        static var lightPurple: UIColor = UIColor(red: 0.816, green: 0.661, blue: 0.995, alpha: 1.000)
        static var purple: UIColor = UIColor(red: 0.506, green: 0.278, blue: 0.753, alpha: 1.000)
        static var cyan: UIColor = UIColor(red: 0.320, green: 0.800, blue: 0.616, alpha: 1.000)
        static var softBrown: UIColor = UIColor(red: 0.800, green: 0.579, blue: 0.320, alpha: 1.000)
        static var gradientOrange: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.orange.CGColor, StyleKit.softOrange.CGColor], [0, 1])
        static var shadow: NSShadow = NSShadow(color: UIColor.blackColor(), offset: CGSizeMake(3.1, 3.1), blurRadius: 5)
        static var imageOfTabIconPlayer: UIImage?
        static var tabIconPlayerTargets: [AnyObject]?
        static var imageOfTabIconPlayerDisabled: UIImage?
        static var tabIconPlayerDisabledTargets: [AnyObject]?
        static var imageOfTabIconSongs: UIImage?
        static var tabIconSongsTargets: [AnyObject]?
        static var imageOfTabIconSongsDisabled: UIImage?
        static var tabIconSongsDisabledTargets: [AnyObject]?
        static var imageOfTabIconHasNotifications: UIImage?
        static var tabIconHasNotificationsTargets: [AnyObject]?
        static var imageOfTabIconHasNotificationsDisabled: UIImage?
        static var tabIconHasNotificationsDisabledTargets: [AnyObject]?
        static var imageOfTabIconNotifications: UIImage?
        static var tabIconNotificationsTargets: [AnyObject]?
        static var imageOfTabIconNotificationsDisabled: UIImage?
        static var tabIconNotificationsDisabledTargets: [AnyObject]?
        static var imageOfDownloadDone: UIImage?
        static var downloadDoneTargets: [AnyObject]?
    }

    //// Colors

    public class var darkOrange: UIColor { return Cache.darkOrange }
    public class var hardOrange: UIColor { return Cache.hardOrange }
    public class var mediumOrange: UIColor { return Cache.mediumOrange }
    public class var softOrange: UIColor { return Cache.softOrange }
    public class var orange: UIColor { return Cache.orange }
    public class var pink: UIColor { return Cache.pink }
    public class var softPink: UIColor { return Cache.softPink }
    public class var darkPurple: UIColor { return Cache.darkPurple }
    public class var hardPurple: UIColor { return Cache.hardPurple }
    public class var softPurple: UIColor { return Cache.softPurple }
    public class var lightPurple: UIColor { return Cache.lightPurple }
    public class var purple: UIColor { return Cache.purple }
    public class var cyan: UIColor { return Cache.cyan }
    public class var softBrown: UIColor { return Cache.softBrown }

    //// Gradients

    public class var gradientOrange: CGGradient { return Cache.gradientOrange }

    //// Shadows

    public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    public class func drawTabIconPlayer() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(1, 1, 32, 32))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradientOrange, CGPointMake(17, 1), CGPointMake(17, 33), 0)
        CGContextRestoreGState(context)


        //// TabBar
        CGContextSaveGState(context)
        CGContextSetBlendMode(context, kCGBlendModeOverlay)
        CGContextBeginTransparencyLayer(context, nil)


        //// Player-v2
        //// Imported-Layers 2 Drawing
        var importedLayers2Path = UIBezierPath()
        importedLayers2Path.moveToPoint(CGPointMake(23.2, 16.32))
        importedLayers2Path.addCurveToPoint(CGPointMake(23.2, 18.36), controlPoint1: CGPointMake(23.84, 16.78), controlPoint2: CGPointMake(23.84, 17.9))
        importedLayers2Path.addLineToPoint(CGPointMake(13.78, 25.07))
        importedLayers2Path.addCurveToPoint(CGPointMake(12.84, 24.42), controlPoint1: CGPointMake(13.36, 25.37), controlPoint2: CGPointMake(12.84, 25))
        importedLayers2Path.addLineToPoint(CGPointMake(12.84, 10.26))
        importedLayers2Path.addCurveToPoint(CGPointMake(13.78, 9.6), controlPoint1: CGPointMake(12.84, 9.68), controlPoint2: CGPointMake(13.36, 9.31))
        importedLayers2Path.addLineToPoint(CGPointMake(23.2, 16.32))
        importedLayers2Path.addLineToPoint(CGPointMake(23.2, 16.32))
        importedLayers2Path.closePath()
        importedLayers2Path.miterLimit = 4;

        importedLayers2Path.usesEvenOddFillRule = true;

        color.setStroke()
        importedLayers2Path.lineWidth = 1
        importedLayers2Path.stroke()




        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawTabIconPlayerDisabled() {
        //// Color Declarations
        let disabled = UIColor(red: 0.565, green: 0.565, blue: 0.565, alpha: 1.000)

        //// Icon
        //// Icons
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(17, 2))
        importedLayersPath.addCurveToPoint(CGPointMake(2, 17), controlPoint1: CGPointMake(8.72, 2), controlPoint2: CGPointMake(2, 8.72))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 32), controlPoint1: CGPointMake(2, 25.28), controlPoint2: CGPointMake(8.72, 32))
        importedLayersPath.addCurveToPoint(CGPointMake(32, 17), controlPoint1: CGPointMake(25.28, 32), controlPoint2: CGPointMake(32, 25.28))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 2), controlPoint1: CGPointMake(32, 8.72), controlPoint2: CGPointMake(25.28, 2))
        importedLayersPath.addLineToPoint(CGPointMake(17, 2))
        importedLayersPath.closePath()
        importedLayersPath.moveToPoint(CGPointMake(23.2, 16.32))
        importedLayersPath.addCurveToPoint(CGPointMake(23.2, 18.36), controlPoint1: CGPointMake(23.84, 16.78), controlPoint2: CGPointMake(23.84, 17.9))
        importedLayersPath.addLineToPoint(CGPointMake(13.78, 25.07))
        importedLayersPath.addCurveToPoint(CGPointMake(12.84, 24.42), controlPoint1: CGPointMake(13.36, 25.37), controlPoint2: CGPointMake(12.84, 25))
        importedLayersPath.addLineToPoint(CGPointMake(12.84, 10.26))
        importedLayersPath.addCurveToPoint(CGPointMake(13.78, 9.6), controlPoint1: CGPointMake(12.84, 9.68), controlPoint2: CGPointMake(13.36, 9.31))
        importedLayersPath.addLineToPoint(CGPointMake(23.2, 16.32))
        importedLayersPath.addLineToPoint(CGPointMake(23.2, 16.32))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        disabled.setStroke()
        importedLayersPath.lineWidth = 1
        importedLayersPath.stroke()
    }

    public class func drawTabIconSongs() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// TabBar
        //// Songs
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(10.05, 4))
        importedLayersPath.addLineToPoint(CGPointMake(10.05, 4))
        importedLayersPath.addCurveToPoint(CGPointMake(14.67, 5.78), controlPoint1: CGPointMake(11.73, 4), controlPoint2: CGPointMake(13.33, 4.62))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 6.67), controlPoint1: CGPointMake(15.33, 6.36), controlPoint2: CGPointMake(16.15, 6.67))
        importedLayersPath.addCurveToPoint(CGPointMake(19.33, 5.78), controlPoint1: CGPointMake(17.85, 6.67), controlPoint2: CGPointMake(18.67, 6.36))
        importedLayersPath.addCurveToPoint(CGPointMake(23.94, 4), controlPoint1: CGPointMake(20.67, 4.62), controlPoint2: CGPointMake(22.26, 4))
        importedLayersPath.addCurveToPoint(CGPointMake(32, 12.89), controlPoint1: CGPointMake(27.82, 4), controlPoint2: CGPointMake(32, 7.4))
        importedLayersPath.addCurveToPoint(CGPointMake(23.11, 25.73), controlPoint1: CGPointMake(32, 18.48), controlPoint2: CGPointMake(27.08, 22.49))
        importedLayersPath.addCurveToPoint(CGPointMake(19.62, 28.51), controlPoint1: CGPointMake(21.6, 26.96), controlPoint2: CGPointMake(20.5, 27.82))
        importedLayersPath.addCurveToPoint(CGPointMake(18.33, 29.53), controlPoint1: CGPointMake(19.12, 28.91), controlPoint2: CGPointMake(18.7, 29.23))
        importedLayersPath.addCurveToPoint(CGPointMake(17.02, 30), controlPoint1: CGPointMake(17.95, 29.84), controlPoint2: CGPointMake(17.5, 30))
        importedLayersPath.addCurveToPoint(CGPointMake(15.69, 29.51), controlPoint1: CGPointMake(16.54, 30), controlPoint2: CGPointMake(16.06, 29.83))
        importedLayersPath.addCurveToPoint(CGPointMake(12.86, 27.27), controlPoint1: CGPointMake(15, 28.94), controlPoint2: CGPointMake(14.15, 28.28))
        importedLayersPath.addCurveToPoint(CGPointMake(10.88, 25.72), controlPoint1: CGPointMake(12.29, 26.83), controlPoint2: CGPointMake(11.64, 26.31))
        importedLayersPath.addCurveToPoint(CGPointMake(2, 12.82), controlPoint1: CGPointMake(6.58, 22.34), controlPoint2: CGPointMake(2, 18.28))
        importedLayersPath.addCurveToPoint(CGPointMake(10.05, 4), controlPoint1: CGPointMake(2, 7.37), controlPoint2: CGPointMake(6.18, 4))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        importedLayersPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradientOrange, CGPointMake(17, 4), CGPointMake(17, 30), 0)
        CGContextRestoreGState(context)
    }

    public class func drawTabIconSongsDisabled() {
        //// Color Declarations
        let disabled = UIColor(red: 0.565, green: 0.565, blue: 0.565, alpha: 1.000)

        //// TabBar
        //// Songs
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(10.05, 4))
        importedLayersPath.addLineToPoint(CGPointMake(10.05, 4))
        importedLayersPath.addCurveToPoint(CGPointMake(14.67, 5.78), controlPoint1: CGPointMake(11.73, 4), controlPoint2: CGPointMake(13.33, 4.62))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 6.67), controlPoint1: CGPointMake(15.33, 6.36), controlPoint2: CGPointMake(16.15, 6.67))
        importedLayersPath.addCurveToPoint(CGPointMake(19.33, 5.78), controlPoint1: CGPointMake(17.85, 6.67), controlPoint2: CGPointMake(18.67, 6.36))
        importedLayersPath.addCurveToPoint(CGPointMake(23.94, 4), controlPoint1: CGPointMake(20.67, 4.62), controlPoint2: CGPointMake(22.26, 4))
        importedLayersPath.addCurveToPoint(CGPointMake(32, 12.89), controlPoint1: CGPointMake(27.82, 4), controlPoint2: CGPointMake(32, 7.4))
        importedLayersPath.addCurveToPoint(CGPointMake(23.11, 25.73), controlPoint1: CGPointMake(32, 18.48), controlPoint2: CGPointMake(27.08, 22.49))
        importedLayersPath.addCurveToPoint(CGPointMake(19.62, 28.51), controlPoint1: CGPointMake(21.6, 26.96), controlPoint2: CGPointMake(20.5, 27.82))
        importedLayersPath.addCurveToPoint(CGPointMake(18.33, 29.53), controlPoint1: CGPointMake(19.12, 28.91), controlPoint2: CGPointMake(18.7, 29.23))
        importedLayersPath.addCurveToPoint(CGPointMake(17.02, 30), controlPoint1: CGPointMake(17.95, 29.84), controlPoint2: CGPointMake(17.5, 30))
        importedLayersPath.addCurveToPoint(CGPointMake(15.69, 29.51), controlPoint1: CGPointMake(16.54, 30), controlPoint2: CGPointMake(16.06, 29.83))
        importedLayersPath.addCurveToPoint(CGPointMake(12.86, 27.27), controlPoint1: CGPointMake(15, 28.94), controlPoint2: CGPointMake(14.15, 28.28))
        importedLayersPath.addCurveToPoint(CGPointMake(10.88, 25.72), controlPoint1: CGPointMake(12.29, 26.83), controlPoint2: CGPointMake(11.64, 26.31))
        importedLayersPath.addCurveToPoint(CGPointMake(2, 12.82), controlPoint1: CGPointMake(6.58, 22.34), controlPoint2: CGPointMake(2, 18.28))
        importedLayersPath.addCurveToPoint(CGPointMake(10.05, 4), controlPoint1: CGPointMake(2, 7.37), controlPoint2: CGPointMake(6.18, 4))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        disabled.setStroke()
        importedLayersPath.lineWidth = 1
        importedLayersPath.stroke()
    }

    public class func drawTabIconHasNotifications() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.hardPurple.CGColor, StyleKit.softPurple.CGColor], [0, 1])

        //// TabBar
        //// Notifications
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(14.71, 4.18))
        importedLayersPath.addCurveToPoint(CGPointMake(4.19, 14.81), controlPoint1: CGPointMake(9.39, 5.06), controlPoint2: CGPointMake(5.1, 9.41))
        importedLayersPath.addCurveToPoint(CGPointMake(5.99, 24.06), controlPoint1: CGPointMake(3.62, 18.24), controlPoint2: CGPointMake(4.37, 21.45))
        importedLayersPath.addCurveToPoint(CGPointMake(6.31, 25.84), controlPoint1: CGPointMake(6.32, 24.59), controlPoint2: CGPointMake(6.46, 25.23))
        importedLayersPath.addLineToPoint(CGPointMake(5.23, 30.25))
        importedLayersPath.addCurveToPoint(CGPointMake(6.22, 31.07), controlPoint1: CGPointMake(5.09, 30.84), controlPoint2: CGPointMake(5.69, 31.34))
        importedLayersPath.addLineToPoint(CGPointMake(10.06, 29.18))
        importedLayersPath.addCurveToPoint(CGPointMake(11.93, 29.16), controlPoint1: CGPointMake(10.65, 28.89), controlPoint2: CGPointMake(11.32, 28.91))
        importedLayersPath.addCurveToPoint(CGPointMake(19.26, 29.95), controlPoint1: CGPointMake(14.13, 30.1), controlPoint2: CGPointMake(16.64, 30.44))
        importedLayersPath.addCurveToPoint(CGPointMake(29.57, 19.19), controlPoint1: CGPointMake(24.54, 28.96), controlPoint2: CGPointMake(28.75, 24.58))
        importedLayersPath.addCurveToPoint(CGPointMake(14.71, 4.18), controlPoint1: CGPointMake(30.94, 10.29), controlPoint2: CGPointMake(23.47, 2.73))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        importedLayersPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradientOrange, CGPointMake(16.87, 4), CGPointMake(16.87, 31.14), 0)
        CGContextRestoreGState(context)






        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(15, 3, 15, 15))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPointMake(22.5, 3), CGPointMake(22.5, 18), 0)
        CGContextRestoreGState(context)
    }

    public class func drawTabIconHasNotificationsDisabled() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let disabled = UIColor(red: 0.565, green: 0.565, blue: 0.565, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [StyleKit.hardPurple.CGColor, StyleKit.softPurple.CGColor], [0, 1])

        //// TabBar
        //// Notifications
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(14.71, 4.18))
        importedLayersPath.addCurveToPoint(CGPointMake(4.19, 14.81), controlPoint1: CGPointMake(9.39, 5.06), controlPoint2: CGPointMake(5.1, 9.41))
        importedLayersPath.addCurveToPoint(CGPointMake(5.99, 24.06), controlPoint1: CGPointMake(3.62, 18.24), controlPoint2: CGPointMake(4.37, 21.45))
        importedLayersPath.addCurveToPoint(CGPointMake(6.31, 25.84), controlPoint1: CGPointMake(6.32, 24.59), controlPoint2: CGPointMake(6.46, 25.23))
        importedLayersPath.addLineToPoint(CGPointMake(5.23, 30.25))
        importedLayersPath.addCurveToPoint(CGPointMake(6.22, 31.07), controlPoint1: CGPointMake(5.09, 30.84), controlPoint2: CGPointMake(5.69, 31.34))
        importedLayersPath.addLineToPoint(CGPointMake(10.06, 29.18))
        importedLayersPath.addCurveToPoint(CGPointMake(11.93, 29.16), controlPoint1: CGPointMake(10.65, 28.89), controlPoint2: CGPointMake(11.32, 28.91))
        importedLayersPath.addCurveToPoint(CGPointMake(19.26, 29.95), controlPoint1: CGPointMake(14.13, 30.1), controlPoint2: CGPointMake(16.64, 30.44))
        importedLayersPath.addCurveToPoint(CGPointMake(29.57, 19.19), controlPoint1: CGPointMake(24.54, 28.96), controlPoint2: CGPointMake(28.75, 24.58))
        importedLayersPath.addCurveToPoint(CGPointMake(14.71, 4.18), controlPoint1: CGPointMake(30.94, 10.29), controlPoint2: CGPointMake(23.47, 2.73))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        disabled.setStroke()
        importedLayersPath.lineWidth = 1
        importedLayersPath.stroke()






        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(15, 3, 15, 15))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPointMake(22.5, 3), CGPointMake(22.5, 18), 0)
        CGContextRestoreGState(context)
    }

    public class func drawTabIconNotifications() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// TabBar
        //// Notifications
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(14.71, 4.18))
        importedLayersPath.addCurveToPoint(CGPointMake(4.19, 14.81), controlPoint1: CGPointMake(9.39, 5.06), controlPoint2: CGPointMake(5.1, 9.41))
        importedLayersPath.addCurveToPoint(CGPointMake(5.99, 24.06), controlPoint1: CGPointMake(3.62, 18.24), controlPoint2: CGPointMake(4.37, 21.45))
        importedLayersPath.addCurveToPoint(CGPointMake(6.31, 25.84), controlPoint1: CGPointMake(6.32, 24.59), controlPoint2: CGPointMake(6.46, 25.23))
        importedLayersPath.addLineToPoint(CGPointMake(5.23, 30.25))
        importedLayersPath.addCurveToPoint(CGPointMake(6.22, 31.07), controlPoint1: CGPointMake(5.09, 30.84), controlPoint2: CGPointMake(5.69, 31.34))
        importedLayersPath.addLineToPoint(CGPointMake(10.06, 29.18))
        importedLayersPath.addCurveToPoint(CGPointMake(11.93, 29.16), controlPoint1: CGPointMake(10.65, 28.89), controlPoint2: CGPointMake(11.32, 28.91))
        importedLayersPath.addCurveToPoint(CGPointMake(19.26, 29.95), controlPoint1: CGPointMake(14.13, 30.1), controlPoint2: CGPointMake(16.64, 30.44))
        importedLayersPath.addCurveToPoint(CGPointMake(29.57, 19.19), controlPoint1: CGPointMake(24.54, 28.96), controlPoint2: CGPointMake(28.75, 24.58))
        importedLayersPath.addCurveToPoint(CGPointMake(14.71, 4.18), controlPoint1: CGPointMake(30.94, 10.29), controlPoint2: CGPointMake(23.47, 2.73))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        importedLayersPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradientOrange, CGPointMake(16.87, 4), CGPointMake(16.87, 31.14), 0)
        CGContextRestoreGState(context)
    }

    public class func drawTabIconNotificationsDisabled() {
        //// Color Declarations
        let disabled = UIColor(red: 0.565, green: 0.565, blue: 0.565, alpha: 1.000)

        //// TabBar
        //// Notifications
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(14.71, 4.18))
        importedLayersPath.addCurveToPoint(CGPointMake(4.19, 14.81), controlPoint1: CGPointMake(9.39, 5.06), controlPoint2: CGPointMake(5.1, 9.41))
        importedLayersPath.addCurveToPoint(CGPointMake(5.99, 24.06), controlPoint1: CGPointMake(3.62, 18.24), controlPoint2: CGPointMake(4.37, 21.45))
        importedLayersPath.addCurveToPoint(CGPointMake(6.31, 25.84), controlPoint1: CGPointMake(6.32, 24.59), controlPoint2: CGPointMake(6.46, 25.23))
        importedLayersPath.addLineToPoint(CGPointMake(5.23, 30.25))
        importedLayersPath.addCurveToPoint(CGPointMake(6.22, 31.07), controlPoint1: CGPointMake(5.09, 30.84), controlPoint2: CGPointMake(5.69, 31.34))
        importedLayersPath.addLineToPoint(CGPointMake(10.06, 29.18))
        importedLayersPath.addCurveToPoint(CGPointMake(11.93, 29.16), controlPoint1: CGPointMake(10.65, 28.89), controlPoint2: CGPointMake(11.32, 28.91))
        importedLayersPath.addCurveToPoint(CGPointMake(19.26, 29.95), controlPoint1: CGPointMake(14.13, 30.1), controlPoint2: CGPointMake(16.64, 30.44))
        importedLayersPath.addCurveToPoint(CGPointMake(29.57, 19.19), controlPoint1: CGPointMake(24.54, 28.96), controlPoint2: CGPointMake(28.75, 24.58))
        importedLayersPath.addCurveToPoint(CGPointMake(14.71, 4.18), controlPoint1: CGPointMake(30.94, 10.29), controlPoint2: CGPointMake(23.47, 2.73))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        disabled.setStroke()
        importedLayersPath.lineWidth = 1
        importedLayersPath.stroke()
    }

    public class func drawDownloadDone() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// TabBar
        //// Ok
        //// Imported-Layers Drawing
        var importedLayersPath = UIBezierPath()
        importedLayersPath.moveToPoint(CGPointMake(16.24, 21.16))
        importedLayersPath.addCurveToPoint(CGPointMake(14.57, 21.16), controlPoint1: CGPointMake(15.78, 21.61), controlPoint2: CGPointMake(15.03, 21.61))
        importedLayersPath.addLineToPoint(CGPointMake(11.44, 18.13))
        importedLayersPath.addCurveToPoint(CGPointMake(11.44, 16.06), controlPoint1: CGPointMake(10.85, 17.55), controlPoint2: CGPointMake(10.85, 16.63))
        importedLayersPath.addLineToPoint(CGPointMake(11.46, 16.03))
        importedLayersPath.addCurveToPoint(CGPointMake(13.59, 16.04), controlPoint1: CGPointMake(12.05, 15.46), controlPoint2: CGPointMake(13, 15.46))
        importedLayersPath.addLineToPoint(CGPointMake(15.4, 17.8))
        importedLayersPath.addLineToPoint(CGPointMake(20.41, 12.93))
        importedLayersPath.addCurveToPoint(CGPointMake(22.54, 12.93), controlPoint1: CGPointMake(21, 12.36), controlPoint2: CGPointMake(21.95, 12.36))
        importedLayersPath.addLineToPoint(CGPointMake(22.56, 12.95))
        importedLayersPath.addCurveToPoint(CGPointMake(22.56, 15.02), controlPoint1: CGPointMake(23.15, 13.52), controlPoint2: CGPointMake(23.15, 14.45))
        importedLayersPath.addLineToPoint(CGPointMake(16.24, 21.16))
        importedLayersPath.addLineToPoint(CGPointMake(16.24, 21.16))
        importedLayersPath.closePath()
        importedLayersPath.moveToPoint(CGPointMake(17, 2))
        importedLayersPath.addCurveToPoint(CGPointMake(2, 17), controlPoint1: CGPointMake(8.72, 2), controlPoint2: CGPointMake(2, 8.72))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 32), controlPoint1: CGPointMake(2, 25.28), controlPoint2: CGPointMake(8.72, 32))
        importedLayersPath.addCurveToPoint(CGPointMake(32, 17), controlPoint1: CGPointMake(25.28, 32), controlPoint2: CGPointMake(32, 25.28))
        importedLayersPath.addCurveToPoint(CGPointMake(17, 2), controlPoint1: CGPointMake(32, 8.72), controlPoint2: CGPointMake(25.28, 2))
        importedLayersPath.addLineToPoint(CGPointMake(17, 2))
        importedLayersPath.closePath()
        importedLayersPath.miterLimit = 4;

        importedLayersPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        importedLayersPath.addClip()
        CGContextDrawLinearGradient(context, StyleKit.gradientOrange, CGPointMake(17, 2), CGPointMake(17, 32), 0)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfTabIconPlayer: UIImage {
        if Cache.imageOfTabIconPlayer != nil {
            return Cache.imageOfTabIconPlayer!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconPlayer()
        Cache.imageOfTabIconPlayer = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconPlayer!
    }

    public class var imageOfTabIconPlayerDisabled: UIImage {
        if Cache.imageOfTabIconPlayerDisabled != nil {
            return Cache.imageOfTabIconPlayerDisabled!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconPlayerDisabled()
        Cache.imageOfTabIconPlayerDisabled = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconPlayerDisabled!
    }

    public class var imageOfTabIconSongs: UIImage {
        if Cache.imageOfTabIconSongs != nil {
            return Cache.imageOfTabIconSongs!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconSongs()
        Cache.imageOfTabIconSongs = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconSongs!
    }

    public class var imageOfTabIconSongsDisabled: UIImage {
        if Cache.imageOfTabIconSongsDisabled != nil {
            return Cache.imageOfTabIconSongsDisabled!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconSongsDisabled()
        Cache.imageOfTabIconSongsDisabled = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconSongsDisabled!
    }

    public class var imageOfTabIconHasNotifications: UIImage {
        if Cache.imageOfTabIconHasNotifications != nil {
            return Cache.imageOfTabIconHasNotifications!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconHasNotifications()
        Cache.imageOfTabIconHasNotifications = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconHasNotifications!
    }

    public class var imageOfTabIconHasNotificationsDisabled: UIImage {
        if Cache.imageOfTabIconHasNotificationsDisabled != nil {
            return Cache.imageOfTabIconHasNotificationsDisabled!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconHasNotificationsDisabled()
        Cache.imageOfTabIconHasNotificationsDisabled = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconHasNotificationsDisabled!
    }

    public class var imageOfTabIconNotifications: UIImage {
        if Cache.imageOfTabIconNotifications != nil {
            return Cache.imageOfTabIconNotifications!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconNotifications()
        Cache.imageOfTabIconNotifications = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconNotifications!
    }

    public class var imageOfTabIconNotificationsDisabled: UIImage {
        if Cache.imageOfTabIconNotificationsDisabled != nil {
            return Cache.imageOfTabIconNotificationsDisabled!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawTabIconNotificationsDisabled()
        Cache.imageOfTabIconNotificationsDisabled = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabIconNotificationsDisabled!
    }

    public class var imageOfDownloadDone: UIImage {
        if Cache.imageOfDownloadDone != nil {
            return Cache.imageOfDownloadDone!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(34, 34), false, 0)
        StyleKit.drawDownloadDone()
        Cache.imageOfDownloadDone = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(UIImageRenderingMode.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfDownloadDone!
    }

    //// Customization Infrastructure

    @IBOutlet var tabIconPlayerTargets: [AnyObject]! {
        get { return Cache.tabIconPlayerTargets }
        set {
            Cache.tabIconPlayerTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconPlayer
            }
        }
    }

    @IBOutlet var tabIconPlayerDisabledTargets: [AnyObject]! {
        get { return Cache.tabIconPlayerDisabledTargets }
        set {
            Cache.tabIconPlayerDisabledTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconPlayerDisabled
            }
        }
    }

    @IBOutlet var tabIconSongsTargets: [AnyObject]! {
        get { return Cache.tabIconSongsTargets }
        set {
            Cache.tabIconSongsTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconSongs
            }
        }
    }

    @IBOutlet var tabIconSongsDisabledTargets: [AnyObject]! {
        get { return Cache.tabIconSongsDisabledTargets }
        set {
            Cache.tabIconSongsDisabledTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconSongsDisabled
            }
        }
    }

    @IBOutlet var tabIconHasNotificationsTargets: [AnyObject]! {
        get { return Cache.tabIconHasNotificationsTargets }
        set {
            Cache.tabIconHasNotificationsTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconHasNotifications
            }
        }
    }

    @IBOutlet var tabIconHasNotificationsDisabledTargets: [AnyObject]! {
        get { return Cache.tabIconHasNotificationsDisabledTargets }
        set {
            Cache.tabIconHasNotificationsDisabledTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconHasNotificationsDisabled
            }
        }
    }

    @IBOutlet var tabIconNotificationsTargets: [AnyObject]! {
        get { return Cache.tabIconNotificationsTargets }
        set {
            Cache.tabIconNotificationsTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconNotifications
            }
        }
    }

    @IBOutlet var tabIconNotificationsDisabledTargets: [AnyObject]! {
        get { return Cache.tabIconNotificationsDisabledTargets }
        set {
            Cache.tabIconNotificationsDisabledTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfTabIconNotificationsDisabled
            }
        }
    }

    @IBOutlet var downloadDoneTargets: [AnyObject]! {
        get { return Cache.downloadDoneTargets }
        set {
            Cache.downloadDoneTargets = newValue
            for target: AnyObject in newValue {
                (target as StyleKitSettableImage).image = StyleKit.imageOfDownloadDone
            }
        }
    }

}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

@objc protocol StyleKitSettableImage {
    var image: UIImage! { get set }
}

@objc protocol StyleKitSettableSelectedImage {
    var selectedImage: UIImage! { get set }
}
